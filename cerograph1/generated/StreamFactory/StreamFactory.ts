// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StreamCreated extends ethereum.Event {
  get params(): StreamCreated__Params {
    return new StreamCreated__Params(this);
  }
}

export class StreamCreated__Params {
  _event: StreamCreated;

  constructor(event: StreamCreated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get interval(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class withdraw extends ethereum.Event {
  get params(): withdraw__Params {
    return new withdraw__Params(this);
  }
}

export class withdraw__Params {
  _event: withdraw;

  constructor(event: withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StreamFactory__getStreamResultValue0Struct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get stopTime(): BigInt {
    return this[4].toBigInt();
  }

  get interval(): BigInt {
    return this[5].toBigInt();
  }

  get remainingBalance(): BigInt {
    return this[6].toBigInt();
  }

  get isEntity(): boolean {
    return this[7].toBoolean();
  }
}

export class StreamFactory__loanVaultsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTokenAddress(): Address {
    return this.value0;
  }

  getTotalBalance(): BigInt {
    return this.value1;
  }
}

export class StreamFactory__streamsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getSender(): Address {
    return this.value0;
  }

  getReceiver(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getStartTime(): BigInt {
    return this.value3;
  }

  getStopTime(): BigInt {
    return this.value4;
  }

  getInterval(): BigInt {
    return this.value5;
  }

  getRemainingBalance(): BigInt {
    return this.value6;
  }

  getIsEntity(): boolean {
    return this.value7;
  }
}

export class StreamFactory extends ethereum.SmartContract {
  static bind(address: Address): StreamFactory {
    return new StreamFactory("StreamFactory", address);
  }

  getStream(
    sender: Address,
    receiver: Address
  ): StreamFactory__getStreamResultValue0Struct {
    let result = super.call(
      "getStream",
      "getStream(address,address):((address,address,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(sender), ethereum.Value.fromAddress(receiver)]
    );

    return changetype<StreamFactory__getStreamResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStream(
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<StreamFactory__getStreamResultValue0Struct> {
    let result = super.tryCall(
      "getStream",
      "getStream(address,address):((address,address,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(sender), ethereum.Value.fromAddress(receiver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<StreamFactory__getStreamResultValue0Struct>(value[0].toTuple())
    );
  }

  getVaultBalance(tokenAddress: Address): BigInt {
    let result = super.call(
      "getVaultBalance",
      "getVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getVaultBalance(tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultBalance",
      "getVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanVaults(param0: Address): StreamFactory__loanVaultsResult {
    let result = super.call(
      "loanVaults",
      "loanVaults(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new StreamFactory__loanVaultsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_loanVaults(
    param0: Address
  ): ethereum.CallResult<StreamFactory__loanVaultsResult> {
    let result = super.tryCall(
      "loanVaults",
      "loanVaults(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StreamFactory__loanVaultsResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  shares(param0: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_shares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  streams(param0: Address, param1: Address): StreamFactory__streamsResult {
    let result = super.call(
      "streams",
      "streams(address,address):(address,address,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new StreamFactory__streamsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_streams(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<StreamFactory__streamsResult> {
    let result = super.tryCall(
      "streams",
      "streams(address,address):(address,address,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StreamFactory__streamsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class CancelStreamCall extends ethereum.Call {
  get inputs(): CancelStreamCall__Inputs {
    return new CancelStreamCall__Inputs(this);
  }

  get outputs(): CancelStreamCall__Outputs {
    return new CancelStreamCall__Outputs(this);
  }
}

export class CancelStreamCall__Inputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CancelStreamCall__Outputs {
  _call: CancelStreamCall;

  constructor(call: CancelStreamCall) {
    this._call = call;
  }
}

export class CreateStreamCall extends ethereum.Call {
  get inputs(): CreateStreamCall__Inputs {
    return new CreateStreamCall__Inputs(this);
  }

  get outputs(): CreateStreamCall__Outputs {
    return new CreateStreamCall__Outputs(this);
  }
}

export class CreateStreamCall__Inputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get stopTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get interval(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class CreateStreamCall__Outputs {
  _call: CreateStreamCall;

  constructor(call: CreateStreamCall) {
    this._call = call;
  }
}

export class ForwardFundsCall extends ethereum.Call {
  get inputs(): ForwardFundsCall__Inputs {
    return new ForwardFundsCall__Inputs(this);
  }

  get outputs(): ForwardFundsCall__Outputs {
    return new ForwardFundsCall__Outputs(this);
  }
}

export class ForwardFundsCall__Inputs {
  _call: ForwardFundsCall;

  constructor(call: ForwardFundsCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ForwardFundsCall__Outputs {
  _call: ForwardFundsCall;

  constructor(call: ForwardFundsCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class SupplyLiquidityCall extends ethereum.Call {
  get inputs(): SupplyLiquidityCall__Inputs {
    return new SupplyLiquidityCall__Inputs(this);
  }

  get outputs(): SupplyLiquidityCall__Outputs {
    return new SupplyLiquidityCall__Outputs(this);
  }
}

export class SupplyLiquidityCall__Inputs {
  _call: SupplyLiquidityCall;

  constructor(call: SupplyLiquidityCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SupplyLiquidityCall__Outputs {
  _call: SupplyLiquidityCall;

  constructor(call: SupplyLiquidityCall) {
    this._call = call;
  }
}

export class WithdrawFromStreamCall extends ethereum.Call {
  get inputs(): WithdrawFromStreamCall__Inputs {
    return new WithdrawFromStreamCall__Inputs(this);
  }

  get outputs(): WithdrawFromStreamCall__Outputs {
    return new WithdrawFromStreamCall__Outputs(this);
  }
}

export class WithdrawFromStreamCall__Inputs {
  _call: WithdrawFromStreamCall;

  constructor(call: WithdrawFromStreamCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawFromStreamCall__Outputs {
  _call: WithdrawFromStreamCall;

  constructor(call: WithdrawFromStreamCall) {
    this._call = call;
  }
}
